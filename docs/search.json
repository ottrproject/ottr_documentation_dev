[
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting Started",
    "section": "",
    "text": "Select the flavor of OTTR are you using to access setup instructions.\n\nOTTR CoursesOTTR WebOTTR Quarto CoursesOTTR Quarto WebOTTR Metricminer Dashboard\n\n\nTab Content\nExample: Provide an example repo\n\n\nTab Content\nExample: Provide an example repo\n\n\nTab Content\nExample: Provide an example repo\n\n\nTab Content\nExample: Provide an example repo\n\n\nTab Content\nExample: Provide an example repo"
  },
  {
    "objectID": "more_features_sources.html",
    "href": "more_features_sources.html",
    "title": "More Features: Citing",
    "section": "",
    "text": "You can generally follow the Bookdown instructions about citations, but you don’t need to add the additional bibliography argument at the top of the Rmd.\nTo add a new reference source, add to the book.bib file, keeping your new entry in alphabetical order.\nFor articles (or anything with a DOI), go to doi2bib.org or ZoteroBib to get a BibTex-formatted reference that you can copy and paste the reference to the book.bib file.\nYou can also use programs like Zotero or Endnote to export a .bib file and either combine with the book.bib or manage your references from there.\nOther sources can be added using this template:\n@website{citekey,\n    author = {First Last},\n    title = {Title},\n    url  = {www.website.com},\n}\nTo reference the citations in your writing follow the bookdown instructions:\n\nItems can be cited directly within the documentation using the syntax @key where key is the citation key in the first line of the entry, e.g., @R-base. To put citations in parentheses, use [@key]. To cite multiple entries, separate the keys by semicolons, e.g., [@key-1; @key-2; @key-3]. To suppress the mention of the author, add a minus sign before @, e.g., [-@R-base].\n\nSee Chapter 2 of this template course for examples.\nThis will automatically list references at the bottom of each chapter included in your course, as well as at the end of your course. Thus it is important to keep the References.Rmd file and to keep this as the last part of the _bookdown.yml file as it is in the template, so that this full list of references will be listed in a place that makes sense.\n\nAlternatively, you can add a header for this list of references as the last header in any other Rmd file that is listed as the final file of the _bookdown.yml file.\nIf you would like to suppress having references listed at the end of each chapter, you can add a line that says split_bib: false to your _output.yml file."
  },
  {
    "objectID": "more_features_sources.html#citing-sources",
    "href": "more_features_sources.html#citing-sources",
    "title": "More Features: Citing",
    "section": "",
    "text": "You can generally follow the Bookdown instructions about citations, but you don’t need to add the additional bibliography argument at the top of the Rmd.\nTo add a new reference source, add to the book.bib file, keeping your new entry in alphabetical order.\nFor articles (or anything with a DOI), go to doi2bib.org or ZoteroBib to get a BibTex-formatted reference that you can copy and paste the reference to the book.bib file.\nYou can also use programs like Zotero or Endnote to export a .bib file and either combine with the book.bib or manage your references from there.\nOther sources can be added using this template:\n@website{citekey,\n    author = {First Last},\n    title = {Title},\n    url  = {www.website.com},\n}\nTo reference the citations in your writing follow the bookdown instructions:\n\nItems can be cited directly within the documentation using the syntax @key where key is the citation key in the first line of the entry, e.g., @R-base. To put citations in parentheses, use [@key]. To cite multiple entries, separate the keys by semicolons, e.g., [@key-1; @key-2; @key-3]. To suppress the mention of the author, add a minus sign before @, e.g., [-@R-base].\n\nSee Chapter 2 of this template course for examples.\nThis will automatically list references at the bottom of each chapter included in your course, as well as at the end of your course. Thus it is important to keep the References.Rmd file and to keep this as the last part of the _bookdown.yml file as it is in the template, so that this full list of references will be listed in a place that makes sense.\n\nAlternatively, you can add a header for this list of references as the last header in any other Rmd file that is listed as the final file of the _bookdown.yml file.\nIf you would like to suppress having references listed at the end of each chapter, you can add a line that says split_bib: false to your _output.yml file."
  },
  {
    "objectID": "customize-docker.html",
    "href": "customize-docker.html",
    "title": "Customizing Docker",
    "section": "",
    "text": "For courses that require running example code, it is strongly advisable to utilize a Docker image during development. This ensures consistent software versions among course developers."
  },
  {
    "objectID": "customize-docker.html#using-the-base_ottr-docker-image",
    "href": "customize-docker.html#using-the-base_ottr-docker-image",
    "title": "Customizing Docker",
    "section": "Using the base_ottr Docker image",
    "text": "Using the base_ottr Docker image\nIf your course doesn’t require any additional packages to run, then you do not need to set up Docker locally but this Docker image jhudsl/base_ottr will run and re-render all of your changes as you add them.\nWe recommend using the jhudsl/base_ottr:main tagged image instead of the latest version. The main image is ready for use, while the latest may be under development. All GitHub Actions by default use the jhudsl/base_ottr:main.\nIf you are new to Docker, you may find it helpful to read this introduction to Docker.\n\nIf you don’t have one, you will need to sign up with a Docker account.\nIf you haven’t installed Docker desktop (or need to update it), you can do so here.\n\nIf your Docker desktop is running, you should see a Docker whale in your tool bar. On Macs, this will be on the bar on the top of your screen; in Windows, on the bottom right.\nA Docker image is similar to a virtual machine - it contains preinstalled software in a preconfigured environment. Docker images can be downloaded from DockerHub, or you can create your own.\nWe have created the base_ottr:main image as a starting point; you can download it from jhudsl/base_ottr:main on DockerHub using the docker pull command we have below. To pull the docker image associated with this template, you can run this command below in your command line. This may take a while:\ndocker pull jhudsl/base_ottr:main\nThis pulls the base_ottr:main image from Docker Hub and copies it to your computer. It will be placed in your local collection of Docker images, managed by Docker (not in your working directory). If you get an error, it may be because you forgot to have your Docker desktop running… see above.\nTo use the Docker image associated with the course template, first navigate to the the top of this GitHub repository. Now you can start up the Docker container using the command below.\nThis runs your local copy of the base_ottr:main image (which you downloaded from DockerHub). The option -v $PWD:/home/rstudio mounts pwd (this repo) and makes it available at /home/rstudio within the container. Replace all of &lt;CHOOSE_PASSWORD&gt; (including the &lt; and &gt;) with a password of your choosing.\nOn a Mac:\ndocker run -it -v $PWD:/home/rstudio -e PASSWORD=&lt;CHOOSE_PASSWORD&gt; -p 8787:8787 jhudsl/base_ottr:main\nOn a Windows:\ndocker run -it -v %CD%:/home/rstudio -e PASSWORD=&lt;CHOOSE_PASSWORD&gt; -p 8787:8787 jhudsl/base_ottr:main\nDo not close this window, but you can minimize it. Open up a new command line window and run the command: docker ps, you should see a container is up and running!\nCouple of handy Docker commands:\n\nTo stop your Docker container, run docker ps to obtain the docker container ID. Then you can use that ID to run docker stop &lt;CONTAINER_ID&gt;.\nTo remove a docker image (which you may need to do from time to time to clear out space), you can run docker image ls to see all your current images. Then you can run either docker image rm &lt;IMAGE_ID&gt;.\nIf you really need to clear out space, you can follow this StackOverflow post on how to remove all images and all containers.\n\nTo obtain further information on utilizing Docker, you can refer to their comprehensive documentation available here.\n\nOptionally run RStudio from the Docker container\nIn a web browser navigate to the following to open an RStudio instance that is run from your Docker container.\nlocalhost:8787\nTo log in, you’ll need to use rstudio as the username and whatever password you put for &lt;CHOOSE_PASSWORD&gt; in the above command."
  },
  {
    "objectID": "customize-docker.html#starting-a-new-docker-image",
    "href": "customize-docker.html#starting-a-new-docker-image",
    "title": "Customizing Docker",
    "section": "Starting a new Docker image",
    "text": "Starting a new Docker image\nShould you find that your course needs additional packages beyond what’s included in the template, you should probably start a new Docker image and you’ll need to do these steps to get this going:\nThere’s a library of ottr-ready docker images that you can see here. If you would like to contribute your own customized docker image that works with OTTR, please file a pull request!\n\nCreate a Dockerhub account if you don’t have one.\nCreate a new Docker image on your Dockerhub account. Follow these instructions if you don’t know how to do that.\nSet up Dockerhub secrets in your repository or organization.\nUpdate the Github actions workflows accordingly.\nEdit the Dockerfile in your repository.\n\n\nSet Dockerhub related secrets\nYou only need to do this once as an organization (if this course is under jhudsl you don’t need to do this step).\nTo give them permission for all these Docker actions, you need to set a GitHub secret. Go to Settings &gt; Secrets and scroll down to organization secrets or you can set this for each repository by creating a repository secret.\n\nClick New repository secret button for each of these secrets\nThe login information in these GitHub secrets must be from an account that has write permissions to the Docker image you wish to manage).\n\nName: DOCKERHUB_USERNAME: For Secret: put your login username for https://hub.docker.com/\nName: DOCKERHUB_TOKEN: For Secret: put an access token for Dockerhub. You can create this by following these instructions. Choose the read,write,delete option.\n\n\nUpdating workflows for new Docker image\nTo make sure that your new Docker image is being used for rendering in the GitHub actions, you need to change the rendering-docker-image: from the default of jhudsl/base_ottr:main and replace it with your docker image tag.\nThen start a new branch so that you can submit a new pull request with your changes.\nNow, when you file a pull request, the Dockerfile build for your docker image will be tested automatically by the GitHub actions if docker-test is set to yes. The default is docker-test: no\n\n\nModifying the Dockerfile for a new image\nRead this chapter for instructions on how to modify Docker images\nYou will probably want to create your Docker image by using the jhudsl/base_ottr:main as your base – this means that all the packages that are in our jhudsl/base_ottr:main image will be included in the Docker image you build.\nFROM jhudsl/base_ottr:main\nYou can take a look at this Dockerfile template we’ve set up here (note that the commands would need to be uncommented and real package names put in place of package_name’s).\n\nTemplate commands for adding packages to the Dockerfile\nThis section gives you the basics on what it looks like to add new packages to your new Docker image.\n\nCRAN Packages:\nFor R packages installed from CRAN, you can add to the running vector list of R packages.\n\n\nBioconductor Packages:\nTo add an R package from Bioconductor, you can follow this kind of format:\nRUN Rscript -e \"options(warn = 2); BiocManager::install( \\\n  c('limma', \\\n    'newpackagename')\n\n\n\nPython Packages:\nTo add a Python package, you will need to add pip3 to install Python packages using this format:\nRUN pip3 install \\\n    \"somepackage==0.1.0\"\n\n\n\n\nTesting a modified Docker image\nRead this chapter for instructions on how to modify Docker images\nWhen you’ve added a package to the Dockerfile, you may want to check that it builds successfully before it’s added to your repository. You can include changes to your Dockerfile in a pull request which will trigger an automatic testing of building it.\nRead this chapter for more tips on how to modify Docker images\nOR\nIf you prefer to test it locally, then you can follow these steps.\nFirst create a GITHUB token file by making a token and copying a pasting it into a plain text file named docker/git_token.txt. (Make sure you do not push this to github and possibly delete it after testing your docker image build!)\nThen you’ll need to rebuild the Docker image using this command after you move into the docker directory) (But replace the &lt;TAG_FOR_COURSE&gt; with the tag for your new image including dropping the &lt; and &gt;:\ndocker build -f Dockerfile . -t &lt;TAG_FOR_COURSE&gt;\nIf it fails, often the issue is a missing dependency. Take a look at the error messages and see if you can determine the issue with some Googling. Also be sure that all your directories and files are named correctly.\nOnce it builds successfully, run the above command with the new name for your docker image make sure that the tag does not have upper case characters):\ndocker build -f Dockerfile . -t jhudsl/&lt;TAG_FOR_COURSE&gt;\n\nPushing the Docker image\nFor any changes you make to your Docker image to take effect in your repository’s github actions and workflows, you must push your updated docker image to Dockerhub. There are two different ways you can push your Docker image.\nLocally, you can push your updated image to Dockerhub using (make sure that the tag does not have upper case characters):\ndocker push jhudsl/&lt;TAG_FOR_COURSE&gt;\nOR\nYou can use GitHub actions to do this by going to your course’s GitHub repository, go to Actions and then to Test build of Dockerfile.\nClick on run workflow type in true underneath Push to Dockerhub?.\nThen click Run. If your Dockerfile builds an image successfully it will automatically be pushed to Dockerhub.\n\n\nGithub actions for handling your Docker image\nFor your personalized docker image, you can store the Dockerfile anywhere. In order for OTTR/GitHub actions to use it, it must be pushed to Dockerhub.\nIt may be easiest to store it in the OTTR-made repository you are working from.\nIn whichever repository you choose to store your Dockerfile, its recommended you use a GitHub action to automatically test it when you make changes. You can use our Docker handling GitHub action here as a starting point.\nYou will need to modify this GHA for your own purposes:\n\nThe action linked above, as is, will only run on manual trigger and manually specifying the directory the Dockerfile is in. For having the trigger run automatically, we recommend setting up a GitHub action trigger.\nYou will definitely need to set up the Dockerhub credentials as described above.\nFor other information about how to modify this GitHub action, we recommend looking at the GitHub actions documentation to become more familiar with how to customize it: https://docs.github.com/en/actions.\n\nIf you do choose to use the action manually, then you can use this by going to Actions, clicking on Build Docker Image &gt; run workflow and write in:\n\ndirectory - Which your Dockerfile is located in this repository\ntag - Optionally, what tag you wish the built docker image to have\nPush to Dockerhub? TRUE or FALSE whether you wish this docker image to be pushed to Dockerhub.\n\n\nFor more guidance on how to personalize Docker images, we taking our Containers for Scientist course. Or file a GitHub issue on the relevant repository."
  },
  {
    "objectID": "more_features_gdoc.html",
    "href": "more_features_gdoc.html",
    "title": "More Features: Google Doc Compatibility",
    "section": "",
    "text": "Google Docs can be a great way to get feedback from collaborators who aren’t comfortable developing in the GitHub environment. docx versions of the course are automatically rendered in pull requests and can be downloaded from the autogenerated comment.\n\nOnce you’ve downloaded the docx, this can be uploaded to Google Drive and shared with the individuals you would like to solicit feedback or new material from. In Google Drive, click + New in the left corner and then File Upload. Choose the docx file you downloaded.\nYou may also want to include a link to the commit ID the Google Doc came from so you are able to keep track of what changes have occurred since the Google doc was set up initially.\nSo you are able to keep track of the changes to the docx version of the course, its advisable to set to “suggestions” when you share the document.\nThen as comments and suggestions trickle in, a lead author who is comfortable with the OTTR process can incorporate those comments into an existing or new pull request which can checked for its rendering and eventually added to the main content branch."
  },
  {
    "objectID": "more_features_gdoc.html#compatibility-with-google-docs",
    "href": "more_features_gdoc.html#compatibility-with-google-docs",
    "title": "More Features: Google Doc Compatibility",
    "section": "",
    "text": "Google Docs can be a great way to get feedback from collaborators who aren’t comfortable developing in the GitHub environment. docx versions of the course are automatically rendered in pull requests and can be downloaded from the autogenerated comment.\n\nOnce you’ve downloaded the docx, this can be uploaded to Google Drive and shared with the individuals you would like to solicit feedback or new material from. In Google Drive, click + New in the left corner and then File Upload. Choose the docx file you downloaded.\nYou may also want to include a link to the commit ID the Google Doc came from so you are able to keep track of what changes have occurred since the Google doc was set up initially.\nSo you are able to keep track of the changes to the docx version of the course, its advisable to set to “suggestions” when you share the document.\nThen as comments and suggestions trickle in, a lead author who is comfortable with the OTTR process can incorporate those comments into an existing or new pull request which can checked for its rendering and eventually added to the main content branch."
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples of OTTR in the Wild",
    "section": "",
    "text": "We are actively working on developing additional versions of our original template to cater to specific needs. These variations can range from technical modifications that simplify the template, to tangential adaptations, or even more complex versions compared to the original OTTR template.\nWe also noticed that if specific branding or variations of the original template need to be used many times, it’s often easier to create a new template.\nWe affectionately call these spinoff templates OTTR “babies”.\nIf you find yourself making a full set of courses and multiple repositories from OTTR, you may want to make a template from our template (If you need to go this route, we recommend reaching out to the OTTR maintainers by filing a GitHub issue and assigning @cansavvy and @carriewright11). Also please reach out if you have any other interesting ideas or suggestions!\n\n\nMaybe you prefer a Quarto website! We have that: https://github.com/ottrproject/OTTR_Quarto\n\n\n\nTBD: Coming soon\n\n\n\nThis is a template powered by the metricminer R package to allow you to display metrics in a dashboard. This template shows basics for how you can display metrics collected from: Github template repo\n\nGoogle Analytics\nGoogle Forms\nGitHub\nCRAN\nCalendly\n\nAnd more websites being added. See metricminer.org for more details!\n\n\n\nThis is a template (made from our main OTTR Template) that is used for a set of courses being made for the AnVIL set of cloud tools\n\nGitHub repository and source code\n\nCourses will look similar to this link.\n\n\n\nThis is a template (made from our main OTTR Template) that will be used for a set of courses being made for DataTrail\n\nGitHub repository and source code\n\nCourses will look similar to this link."
  },
  {
    "objectID": "examples.html#quarto-spinoff",
    "href": "examples.html#quarto-spinoff",
    "title": "Examples of OTTR in the Wild",
    "section": "",
    "text": "Maybe you prefer a Quarto website! We have that: https://github.com/ottrproject/OTTR_Quarto"
  },
  {
    "objectID": "examples.html#jekyll-spinoff",
    "href": "examples.html#jekyll-spinoff",
    "title": "Examples of OTTR in the Wild",
    "section": "",
    "text": "TBD: Coming soon"
  },
  {
    "objectID": "examples.html#metric-collection",
    "href": "examples.html#metric-collection",
    "title": "Examples of OTTR in the Wild",
    "section": "",
    "text": "This is a template powered by the metricminer R package to allow you to display metrics in a dashboard. This template shows basics for how you can display metrics collected from: Github template repo\n\nGoogle Analytics\nGoogle Forms\nGitHub\nCRAN\nCalendly\n\nAnd more websites being added. See metricminer.org for more details!"
  },
  {
    "objectID": "examples.html#anvil-template",
    "href": "examples.html#anvil-template",
    "title": "Examples of OTTR in the Wild",
    "section": "",
    "text": "This is a template (made from our main OTTR Template) that is used for a set of courses being made for the AnVIL set of cloud tools\n\nGitHub repository and source code\n\nCourses will look similar to this link."
  },
  {
    "objectID": "examples.html#datatrail-template",
    "href": "examples.html#datatrail-template",
    "title": "Examples of OTTR in the Wild",
    "section": "",
    "text": "This is a template (made from our main OTTR Template) that will be used for a set of courses being made for DataTrail\n\nGitHub repository and source code\n\nCourses will look similar to this link."
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "Getting started\nCreate your repository by clicking on the Use this Template button at OTTR_Template_Website repository\n\nYou’ll need to make your repository public.\n\n\nSet your GH_PAT\nTo enable the GitHub actions, your repository needs to be setup in a specific way.\nFor OTTR GitHub actions to run, they need to have credentials through a personal access token.\n\nSet up your own personal access token following these instructions - but create a classic token. Keep this personal access token handy for the next step. When you get to the permissions page, check the box that says repo and select all that is underneath that header. No other permissions are necessary.\n\n\n\nClick here for more detailed instructions. The instructions for this step may change with updates to GitHub.\n\nFirst, go to your username settings, by clicking on your user icon (upper right corner) and scrolling down to settings.\n\n\n\n\n\n\n\n\n\nNext, scroll all the way down on the far right menu to “Developer Settings”.\n\n\n\n\n\n\n\n\n\nThen select “Personal Access Tokens” and “Tokens (classic)”\n\n\n\n\n\n\n\n\n\nThen click “Generate new token” and confirm that you want classic.\n\n\n\n\n\n\n\n\n\nFinally, add a name select all the repo scopes and scroll down to the green button to generate the token. Copy this somewhere safe to then paste into your repository settings.\n\n\n\n\n\n\n\n\n\n\n\nIn your new OTTR_Template_Website derived repository, go to Settings &gt; Secrets and variables &gt; Actions. Click New Repository Secret.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the window opened, name this new secret GH_PAT and paste the personal access token in the box below. (Note that the name GH_PAT is specific to how OTTR works and other secret names cannot be used and for OTTR to still work).\nClick the green button to add the secret.\n\n\n\n\n\n\n\n\n\n\n\nAllow GitHub Actions\nGo to the settings menu for your repository that you created from the template. This should be located at the top of GitHub on the right side.\nScroll down to the “Actions” button and click it, then click “General”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScroll down to the workflow permissions section and select “Read and write permissions”, then click “Allow GitHub actions to create and approve pull requests.\nFinally, click “save”.\n\n\n\n\n\n\n\n\n\n\n\nProtect branches\nAlthough this isn’t entirely required, its strongly recommended that you use these settings to protect your main branches.\nClick on settings in the far upper right corner:\n\n\n\n\n\n\n\n\n\nClick on branches:\n\n\n\n\n\n\n\n\n\nClick the add rule button.\n\n\n\n\n\n\n\n\n\nType “main” as the branch name pattern:\n\n\n\n\n\n\n\n\n\nClick on the following boxes to require pull requests before merging:\n\n\n\n\n\n\n\n\n\nNote that if you have admin privileges on this repository, you will likely still be able to override these branch protections so use caution when git pushing!"
  },
  {
    "objectID": "customize-robots.html",
    "href": "customize-robots.html",
    "title": "Customizing Automatic Checks",
    "section": "",
    "text": "By default, all automation steps and checks will run. Based on the requirements of your course, you have the flexibility to enable or disable specific features by modifying the settings in the config_automation.yml file. Simply adjust the options to “true” or “false” accordingly.\nThe config_automation.yml file looks like this:\nThere are three main sets of automation steps and checks run:"
  },
  {
    "objectID": "customize-robots.html#pull-request-checks",
    "href": "customize-robots.html#pull-request-checks",
    "title": "Customizing Automatic Checks",
    "section": "Pull Request Checks:",
    "text": "Pull Request Checks:\nThese actions are triggered upon a pull request being opened. They are set up in this file: .github/workflows/pull-request.yml\n\nCheck Quiz Formatting\nIn the config_automation.yml file it is set by:\ncheck-quizzes: false\nBy default, it is set to false. But if you wish to create quizzes on Leanpub, you should set this to true. This is not necessary if you only want quizzes for Coursera. Leanpub needs a particular format for it to upload correctly. This action will look for quizzes in the quizzes directory and check for these items. The outcome of these quiz checks will be printed to a GitHub comment on your pull request.\n\n\nCheck for broken URLs\nIn the config_automation.yml file there are two different URL checkers.\n\nOne that is run during pull requests. It is set by:\n\nurl-checker: true\nGitHub Actions runs a check on all the URLs upon creating a pull request to the main branch. If it fails, you can click on the output comment on your pull request that says “Click here to download detailed error reports”. This will download a zip file containing a list of the broken URLs it found.\nIf you don’t set the additional error threshold option in the config_automation file, the check summary may still report that the URL check failed, even if 0 errors were found.\nurl_error_min: 0\n\nThe other URL check runs on a set interval to see if any URLs referenced are no longer valid. This one is set by:\n\nurl-check-periodically: true\nIf either URL checker is failing on something that isn’t really a URL or doesn’t need to be checked, open the resources/ignore-urls.txt file and add that URL exactly as it is specified in the error print out. After committing the changes to resources/ignore-urls.txt on your branch, the url check status check should be successfully passed.\n\n\nPreview rendering\nIn the config_automation.yml file it is set by:\nrender-preview: true\nAfter you open a pull request, a preview of the renders will be linked in an automatic comment on the pull request. Upon each commit these previews will re-render and edit the comment with the latest render.\n\nThese Github Actions are located in render-preview section of the pull-request.yml. These previews do NOT incorporate any changes influenced by any changes to the Docker image if the Dockerfile is also updated in the same pull request.\n\n\nSpell checking\nIn the config_automation.yml file it is set by:\nspell-check: true\nGithub Actions will automatically run a spell check on all Rmds and mds whenever a pull request to the main branch is filed.\nThe error threshold option controls how many errors are allowed before the check will fail.\nspell_error_min: 0\nYou’ll need to resolve those before being able to merge your pull request. Errors are displayed in much the same way as PR URL check errors with a summary of how many errors are found. Click on the output comment on your pull request that says “Click here to download detailed error reports”. This will download a zip file containing a list of the spelling errors it found.\nSome of these errors may be things that the spell check doesn’t recognize for example: ITCR or DaSL. If it’s a ‘word’ the spell check should recognize, you’ll need to add this to the dictionary.\nGo to the resources/dictionary.txt file. Open the file and add the new ‘word’ to its appropriate place (the words are in alphabetical order). After committing the changes to resources/dictionary.txt on your branch, the spell check status check should be successfully passed.\nThe PR comment included below shows an example of a check that passed (spell check), and a check that failed (the URL check) with the option to download detailed error report(s).\n\nWhen all checks pass, the option to download error reports is no longer included, instead displaying a message that the URL and spell checks passed.\n\n\n\nStyle code\nIn the config_automation.yml file it is set by:\nstyle-code: true\nThe styler package will style R code in all Rmds. Style changes will automatically be committed back to your branch.\n\n\nDocker testing\nIn the config_automation.yml file it looks like:\ndocker-test: false\nBy default it is set to false which means it won’t run automatically unless you change this to true. This is only relevant if you have your own Docker image you are managing for your course. If changes are made to Docker-relevant files: Dockerfile, install_github.R, or github_package_list.tsv, this will test re-build the Docker image. If it is successfully built, then it makes sense to merge it to main but the Docker Image will not be pushed to Dockerhub automatically. Follow these instructions to push your Docker image to Dockerhub."
  },
  {
    "objectID": "customize-robots.html#rendering-actions",
    "href": "customize-robots.html#rendering-actions",
    "title": "Customizing Automatic Checks",
    "section": "Rendering actions",
    "text": "Rendering actions\nUpon merging changes to any Rmd or assets/ folder to main, the course material will be automatically re-rendered.\nFor rendering a website version of the course (or your website), rather than true or false, the options are rmd, rmd_web, quarto or quarto_web.\n\nIf rendering a course with RMarkdown files, use rmd.\nIf rendering a course with quarto files, use quarto.\nIf rendering a website with RMarkdown files, use rmd_web.\nIf rendering a website with quarto files, use quarto_web.\n\nrender-website: rmd\nBy default, all rendering steps will be run. But depending on the needs of your course, you can turn these on and off by going to the config_automation.yml file and switching options to true or false.\nrender-leanpub: true\nrender-coursera: true\nFor publishing to Leanpub, make sure that the render Leanpub option is set to true: render-leanpub: true. See more details about publishing to Leanpub here.\nIf render-leanpub is true, the make-book-txt option is also relevant. This option controls whether you’d like to manually specify the order of your chapters and quizzes by creating the Book.txt file by hand or whether you’d like this to be automatically generated based on file and quiz numbering.. Read more about this in the upcoming section.\nBy default, make-book-txt: true will use the numbering in the names of the documents for chapters and quizzes to order them, but if you’d like to specify the order for the chapters and quizzes to be different on Leanpub, then set this to make-book-txt: false, so as not to override the book.txt file that you would make manually.\nmake-book-txt: true\nFor publishing to Coursera, make sure render Coursera option is set to true: render-coursera: true. See more details about publishing to Coursera here."
  },
  {
    "objectID": "customize-robots.html#manually-running-rendering-or-checks",
    "href": "customize-robots.html#manually-running-rendering-or-checks",
    "title": "Customizing Automatic Checks",
    "section": "Manually running rendering or checks",
    "text": "Manually running rendering or checks\nFrom time to time, it may be useful to manually re-trigger a particular GitHub Action. Most of the GitHub Actions, particularly the rendering ones, can be re-run manually. See this article about how to manually re-run a GitHub Action."
  },
  {
    "objectID": "customize-robots.html#fixing-broken-github-actions",
    "href": "customize-robots.html#fixing-broken-github-actions",
    "title": "Customizing Automatic Checks",
    "section": "Fixing broken GitHub Actions",
    "text": "Fixing broken GitHub Actions\nGitHub action rendering or other GitHub actions may fail sometimes if the input is unexpected or for a number of other reasons. To investigate why a GitHub action has failed, go to Actions and click on the failed action. See this article for how to find this information.\nSee our FAQ’s section for the most commonly encountered errors and how to address them.\nIf you are unsure what the error message means and have trouble addressing it, please file an issue on the OTTR_Template repository to get help."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact Us",
    "section": "",
    "text": "If you have questions please contact:\n\nCarrie Wright (cwrigh60@jhu.edu)"
  },
  {
    "objectID": "more_features_credits.html",
    "href": "more_features_credits.html",
    "title": "More Features: Giving Credit",
    "section": "",
    "text": "Since so many individuals contribute to our courses in so many ways, we decided to make a table of credits to make it clear who did what.\nHere is an example:\n\nPlease see the About section of the template for descriptions of how credits should be attributed for the course.\nThis is generated from the About.Rmd file. An About.Rmd file will already be in your course from using our template. You will need to do the following steps to update it for your course:\n\nFill out author names for the various roles where applicable.\nDelete lines for roles that are not applicable.\nMake sure roles grammatically match names. If there are multiple people include the “s” in the role name where applicable and remove the parentheses. If only one person is appropriate for a given role remove “(s)” from the role name.\nEnsure that each row has “|” around each cell value.\n\nExample Table:\nThe first row and additional rows based on this table should be added and filled in using Markdown table format.\n|Credits|Names|\n|-------|-----|\n|Lead Content Instructor|FirstName LastName|\nLinks to personal websites can be added below the table to make it easier to read.\n|Credits|Names|\n|-------|-----|\n|Lead Content Instructor|[FirstName LastName]|\n\n&lt;!-- Author information --&gt;\n\n[FirstName LastName]: link to personal website\nThese rows should be included for all courses:\n|Template Publishing Engineers|[Candace Savonen], [Carrie Wright], [Ava Hoffman]|\n|Publishing Maintenance Engineer|[Candace Savonen]|\n|Technical Publishing Stylists|[Carrie Wright], [Ava Hoffman], [Candace Savonen]|\n|Package Developers ([ottrpal]) [Candace Savonen], [Ava Hoffman], [Howard Baek], [Kate Isaac], [Carrie Wright], [John Muschelli]|\n\n&lt;!-- Author information --&gt;\n\n[John Muschelli]: https://johnmuschelli.com/\n[Candace Savonen]: https://www.cansavvy.com/\n[Carrie Wright]: https://carriewright11.github.io/\n[Ava Hoffman]: https://www.avahoffman.com/\n[Howard Baek]: https://www.linkedin.com/in/howard-baik/\n[Kate Isaac]: https://kweav.github.io/\n\n&lt;!-- Links --&gt;\n\n[ottrpal]: https://github.com/ottrproject/ottrpal\nThese rows should be added to all Johns Hopkins courses:\n|Content Publisher|[Ira Gooding]|\n|Content Publishing Reviewer|Ira Gooding]|\n\n&lt;!-- Author information --&gt;\n\n[Ira Gooding]: https://publichealth.jhu.edu/faculty/4130/ira-gooding\nAdditionally, this row should be added for all ITCR Courses:\n|Content Directors|[Jeff Leek]|\n\n&lt;!-- Author information --&gt;\n\n[Jeff Leek]: https://jtleek.com/\n\n\nIn Coursera, you can add the credits table URL as an ungraded plugin (the same as described here for adding chapter content). This should be added at the beginning of your course, right after the introduction.\n\n\n\nIn Leanpub, make sure that your About.md file in your manuscript folder is listed in your Book.txt file and this Credits table will automatically be incorporated into your Leanpub course."
  },
  {
    "objectID": "more_features_credits.html#giving-credits-to-contributors",
    "href": "more_features_credits.html#giving-credits-to-contributors",
    "title": "More Features: Giving Credit",
    "section": "",
    "text": "Since so many individuals contribute to our courses in so many ways, we decided to make a table of credits to make it clear who did what.\nHere is an example:\n\nPlease see the About section of the template for descriptions of how credits should be attributed for the course.\nThis is generated from the About.Rmd file. An About.Rmd file will already be in your course from using our template. You will need to do the following steps to update it for your course:\n\nFill out author names for the various roles where applicable.\nDelete lines for roles that are not applicable.\nMake sure roles grammatically match names. If there are multiple people include the “s” in the role name where applicable and remove the parentheses. If only one person is appropriate for a given role remove “(s)” from the role name.\nEnsure that each row has “|” around each cell value.\n\nExample Table:\nThe first row and additional rows based on this table should be added and filled in using Markdown table format.\n|Credits|Names|\n|-------|-----|\n|Lead Content Instructor|FirstName LastName|\nLinks to personal websites can be added below the table to make it easier to read.\n|Credits|Names|\n|-------|-----|\n|Lead Content Instructor|[FirstName LastName]|\n\n&lt;!-- Author information --&gt;\n\n[FirstName LastName]: link to personal website\nThese rows should be included for all courses:\n|Template Publishing Engineers|[Candace Savonen], [Carrie Wright], [Ava Hoffman]|\n|Publishing Maintenance Engineer|[Candace Savonen]|\n|Technical Publishing Stylists|[Carrie Wright], [Ava Hoffman], [Candace Savonen]|\n|Package Developers ([ottrpal]) [Candace Savonen], [Ava Hoffman], [Howard Baek], [Kate Isaac], [Carrie Wright], [John Muschelli]|\n\n&lt;!-- Author information --&gt;\n\n[John Muschelli]: https://johnmuschelli.com/\n[Candace Savonen]: https://www.cansavvy.com/\n[Carrie Wright]: https://carriewright11.github.io/\n[Ava Hoffman]: https://www.avahoffman.com/\n[Howard Baek]: https://www.linkedin.com/in/howard-baik/\n[Kate Isaac]: https://kweav.github.io/\n\n&lt;!-- Links --&gt;\n\n[ottrpal]: https://github.com/ottrproject/ottrpal\nThese rows should be added to all Johns Hopkins courses:\n|Content Publisher|[Ira Gooding]|\n|Content Publishing Reviewer|Ira Gooding]|\n\n&lt;!-- Author information --&gt;\n\n[Ira Gooding]: https://publichealth.jhu.edu/faculty/4130/ira-gooding\nAdditionally, this row should be added for all ITCR Courses:\n|Content Directors|[Jeff Leek]|\n\n&lt;!-- Author information --&gt;\n\n[Jeff Leek]: https://jtleek.com/\n\n\nIn Coursera, you can add the credits table URL as an ungraded plugin (the same as described here for adding chapter content). This should be added at the beginning of your course, right after the introduction.\n\n\n\nIn Leanpub, make sure that your About.md file in your manuscript folder is listed in your Book.txt file and this Credits table will automatically be incorporated into your Leanpub course."
  },
  {
    "objectID": "more_features_ganalytic.html",
    "href": "more_features_ganalytic.html",
    "title": "More Features: Google Analytics Integration",
    "section": "",
    "text": "If you would like to add Google Analytics to track traffic to your course, you can do the following:\n\nGet a Google Analytics account (if you do not already have one): https://analytics.google.com/analytics  Note that in creating an account you will need to agree to some terms. Currently it is free to get Google analytics data as long as your course does not exceed a very high user rate.\n\nCheck to make sure that the terms work for you \n\nIf you already have an account or navigated away from where you started - Go to the Admin tab (lower left button that looks like a gear)\nSet up a new property (fill out name and details, select options about tracking traffic for how you intend to use Google Analytics)   \nAdd a stream to your property, choose the Web option. \nFill in your stream information with the link for your course (note you may need to remove https as this is part of a pull down menu to the left of where you paste your link)  \nOn the resulting page you will see a Measurement ID. Copy this ID and paste it in the GA_Script.html file in the template replacing the fields that say {MeasurementID} including the curly brackets. For example, if your ID was G-ABC123, then the line gtag('config', '{MeasurementID}'); would become gtag('config', 'G-ABC123');.  \nAdd a line to the _output.yml file above the line that starts with before body: (i.e. nested under includes). This line should be in_header: GA_Script.html. Make sure this line is indented to the same level as the before body: line. \nRerender your course by making a change to one of your chapter RMD files in a pull request and pushing and merging the pull request. This will cause new html files to be made for each chapter in the docs folder. The Google Analytics code should now be in each of the html files - you can check by searching for Google Analytics.\nGo back to Google Analytics and log in if you need to.\nCheck on the Reports button on the top of the far left icon menu. The icon looks like a bar chart. If you open up a browser window to your hosted course online, then you should see yourself as 1 user in the last 30 minutes.\n\n \n\nEnjoy the data about how people are using your course!"
  },
  {
    "objectID": "more_features_ganalytic.html#google-analytics",
    "href": "more_features_ganalytic.html#google-analytics",
    "title": "More Features: Google Analytics Integration",
    "section": "",
    "text": "If you would like to add Google Analytics to track traffic to your course, you can do the following:\n\nGet a Google Analytics account (if you do not already have one): https://analytics.google.com/analytics  Note that in creating an account you will need to agree to some terms. Currently it is free to get Google analytics data as long as your course does not exceed a very high user rate.\n\nCheck to make sure that the terms work for you \n\nIf you already have an account or navigated away from where you started - Go to the Admin tab (lower left button that looks like a gear)\nSet up a new property (fill out name and details, select options about tracking traffic for how you intend to use Google Analytics)   \nAdd a stream to your property, choose the Web option. \nFill in your stream information with the link for your course (note you may need to remove https as this is part of a pull down menu to the left of where you paste your link)  \nOn the resulting page you will see a Measurement ID. Copy this ID and paste it in the GA_Script.html file in the template replacing the fields that say {MeasurementID} including the curly brackets. For example, if your ID was G-ABC123, then the line gtag('config', '{MeasurementID}'); would become gtag('config', 'G-ABC123');.  \nAdd a line to the _output.yml file above the line that starts with before body: (i.e. nested under includes). This line should be in_header: GA_Script.html. Make sure this line is indented to the same level as the before body: line. \nRerender your course by making a change to one of your chapter RMD files in a pull request and pushing and merging the pull request. This will cause new html files to be made for each chapter in the docs folder. The Google Analytics code should now be in each of the html files - you can check by searching for Google Analytics.\nGo back to Google Analytics and log in if you need to.\nCheck on the Reports button on the top of the far left icon menu. The icon looks like a bar chart. If you open up a browser window to your hosted course online, then you should see yourself as 1 user in the last 30 minutes.\n\n \n\nEnjoy the data about how people are using your course!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": " OTTR - Website and Online Course Tools",
    "section": "",
    "text": "OTTR (Open-source Tools for Training Resources ) is a set of tools and templates to help you make websites, online courses, and dashboards more easily (and for free)!\n\n\n \n\nOTTR at a Glance by ITN\n\nBenefits for all OTTR options:\n\nNo software installations needed\nAutomatically preview content on GitHub before you publish\nAutomatically check spelling (and customize your dictionary!)\nAutomatically and periodically check for broken links\nEasily customize branding\nEasily include code (and avoid version difference issues using Docker containers)\n\n\n\n\n\n\n\n\n\n\n\n\nBenefits for specific uses:\n\nWebsites can be created using quarto or bookdown\nCourses can be easily formatted for learning platforms like coursera and Leanpub (only edit once and it gets propagated to all locations - making for easy updates!)\nMetrics can be gathered from a variety of sources for dashboards\n\n (*Note that you will need to establish a publishing contract with coursera if you want to publish there)\nCheck out this short video about OTTR:\n\n\n\n\n\n\nHow to use OTTR:\n\nEdit and write websites and courses in R Markdown files or Quarto\nUse GitHub to host your content, we will walk you through how!\nLet the GitHub actions in our tools do all the checks and rendering so you don’t have too\nUpdate your content as needed based on the errors OTTR finds and the preview\nPublish your websites and courses! \n\n\n\nHow to Cite OTTR:\nPlease cite our OTTR manuscript here!📝👀\n\n\nClick here for the BibTeX formatted citation\n\n@article{ottr,\n  author = {Candace Savonen, Carrie Wright, Ava M. Hoffman, John Muschelli, Katherine Cox, Frederick J. Tan and Jeffrey T. Leek},\n  title = {Open-source Tools for Training Resources – OTTR},\n  journal = {Journal of Statistics and Data Science Education},\n  volume = {31},\n  number = {1},\n  pages = {57-65},\n  year = {2023},\n  publisher = {Taylor & Francis},\n  doi = {10.1080/26939169.2022.2118646},\n  URL = {https://doi.org/10.1080/26939169.2022.2118646},\n  eprint = {https://doi.org/10.1080/26939169.2022.2118646}\n}"
  },
  {
    "objectID": "style.html",
    "href": "style.html",
    "title": "Style",
    "section": "",
    "text": "To change the part of the navigation bar that says “OTTR Quarto”, modify the title within the _quarto.yml file."
  },
  {
    "objectID": "style.html#navigation-bar",
    "href": "style.html#navigation-bar",
    "title": "Style",
    "section": "",
    "text": "To change the part of the navigation bar that says “OTTR Quarto”, modify the title within the _quarto.yml file."
  },
  {
    "objectID": "style.html#overall-theme",
    "href": "style.html#overall-theme",
    "title": "Style",
    "section": "Overall theme",
    "text": "Overall theme\nTo change the color scheme/fonts of the website modify the theme in the _site.yml file (see here for options):"
  },
  {
    "objectID": "style.html#change-the-favicon",
    "href": "style.html#change-the-favicon",
    "title": "Style",
    "section": "Change the favicon",
    "text": "Change the favicon\nThe small image that shows up on the browser can also be changed.\nYou can make a small image to replace the existing one by going to https://favicon.io/favicon-converter/ and uploading an image that you would like.\nNext, simply replace the image called favicon.ico in the images directory within the resources directory with the image you just created and downloaded from the favicon converter website."
  },
  {
    "objectID": "style.html#additional-changes",
    "href": "style.html#additional-changes",
    "title": "Style",
    "section": "Additional changes",
    "text": "Additional changes\nTo make additional changes to the style, you can modify the styles.css file with css code. This website has great information about css code.\nAs an example if you wanted to change the color of the blue line to green you could change where it says lightblue to lightgreen in the styles.css file. You can also use a hex color code like those that can be found at this website, such as #00FF9E to get a specific shade.\n\n\n\n\n\n\n\n\n\nNote that if you change the css file with a new element that is not already defined like body then you would need to do it as done with the banner element. This was then added to the index.Rmd file by using:\n&lt;div class = \"banner\"&gt;\nBanner text!  \n&lt;/div&gt;\nAlso checkout the Quarto docs for more customization of the pages."
  },
  {
    "objectID": "more_features_borrowing.html",
    "href": "more_features_borrowing.html",
    "title": "More Features: Borrowing Content",
    "section": "",
    "text": "If you have two courses where the content and topics overlap, you may want to share written material between the two.\nHowever, sharing material by copying and pasting can lead to maintenance issues, as updating one would require remembering to update the other as well! 😱\nIn OTTR, we try to minimize maintenance pains. To get around this, we use cow::borrow_chapter() from the jhudsl/cow package. The cow package is already on the jhudsl/course_template Docker image so you do not need to install it if you are using the Docker image or if you are have GitHub Actions do all the rendering for you.\nTo borrow a chapter from another course, create an .Rmd as you normally would, with a ottrpal::set_knitr_image_path() in a chunk at the beginning of the file and a H1 title.\nThen, wherever you would like the borrowed chapter to appear, put an R chunk with this; where {r, echo = FALSE, results='asis'} is included in your chunk arguments.\ncow::borrow_chapter(\n  doc_path = \"02-chapter_of_course.Rmd\",\n  repo_name = \"ottrproject/OTTR_Template\"\n)\nThe magic of this function is that whenever the course is re-rendered it will knit the latest version of the chapter you are borrowing. Note that this chunk cannot be run interactively, just include it in your Rmd and render your course as usual.\n\n\nIf for some reason you would like a local file incorporated, just leave off the repo_name argument and cow::borrow_chapter() will look for the chapter locally.\nHave your chunk arguments include {r, echo = FALSE, results='asis'}.\ncow::borrow_chapter(\n  doc_path = \"02-chapter_of_course.Rmd\"\n)\n\n\n\nIf you are borrowing from a course in a private repository, you will need to supply a GitHub personal access token using a git_pat argument like this:\nHave your chunk arguments include:{r, echo = FALSE, results='asis'}\ncow::borrow_chapter(\n  doc_path = \"02-chapter_of_course.Rmd\",\n  repo_name = \"jhudsl/Private_Repo\",\n  git_pat = \"12345\"\n)\n\n\n\nIf you want to change the title you can use an option remove_h1 to remove the title from the incoming borrowed chapter.\n\n\n\n\nIf you don’t want the material from another chapter completely copied over, you might instead just want to put a link to the Bookdown chapter. You can just use the full URL. A link would look something like this:\n![](https://ottrproject.org/OTTR_Template/a-new-chapter.html)\nYou might want your course available for download as a docx. For example, you might be running a “train-the-trainer” workshop where trainees don’t feel comfortable using Github to edit the lessons for their own use.\nThe following yml in index.Rmd allows you to render the docx with a table of contents:\noutput:\n    bookdown::word_document2:\n      toc: true\nYou can also incorporate a template docx if you have headers and logos you want to use. To incorporate a template, make sure you add the reference_docx argument:\noutput:\n    bookdown::word_document2:\n      reference_docx: &lt;path/to/template&gt;.docx\n      toc: true\nLearn more about templates here."
  },
  {
    "objectID": "more_features_borrowing.html#borrowing-chapters",
    "href": "more_features_borrowing.html#borrowing-chapters",
    "title": "More Features: Borrowing Content",
    "section": "",
    "text": "If you have two courses where the content and topics overlap, you may want to share written material between the two.\nHowever, sharing material by copying and pasting can lead to maintenance issues, as updating one would require remembering to update the other as well! 😱\nIn OTTR, we try to minimize maintenance pains. To get around this, we use cow::borrow_chapter() from the jhudsl/cow package. The cow package is already on the jhudsl/course_template Docker image so you do not need to install it if you are using the Docker image or if you are have GitHub Actions do all the rendering for you.\nTo borrow a chapter from another course, create an .Rmd as you normally would, with a ottrpal::set_knitr_image_path() in a chunk at the beginning of the file and a H1 title.\nThen, wherever you would like the borrowed chapter to appear, put an R chunk with this; where {r, echo = FALSE, results='asis'} is included in your chunk arguments.\ncow::borrow_chapter(\n  doc_path = \"02-chapter_of_course.Rmd\",\n  repo_name = \"ottrproject/OTTR_Template\"\n)\nThe magic of this function is that whenever the course is re-rendered it will knit the latest version of the chapter you are borrowing. Note that this chunk cannot be run interactively, just include it in your Rmd and render your course as usual.\n\n\nIf for some reason you would like a local file incorporated, just leave off the repo_name argument and cow::borrow_chapter() will look for the chapter locally.\nHave your chunk arguments include {r, echo = FALSE, results='asis'}.\ncow::borrow_chapter(\n  doc_path = \"02-chapter_of_course.Rmd\"\n)\n\n\n\nIf you are borrowing from a course in a private repository, you will need to supply a GitHub personal access token using a git_pat argument like this:\nHave your chunk arguments include:{r, echo = FALSE, results='asis'}\ncow::borrow_chapter(\n  doc_path = \"02-chapter_of_course.Rmd\",\n  repo_name = \"jhudsl/Private_Repo\",\n  git_pat = \"12345\"\n)\n\n\n\nIf you want to change the title you can use an option remove_h1 to remove the title from the incoming borrowed chapter.\n\n\n\n\nIf you don’t want the material from another chapter completely copied over, you might instead just want to put a link to the Bookdown chapter. You can just use the full URL. A link would look something like this:\n![](https://ottrproject.org/OTTR_Template/a-new-chapter.html)\nYou might want your course available for download as a docx. For example, you might be running a “train-the-trainer” workshop where trainees don’t feel comfortable using Github to edit the lessons for their own use.\nThe following yml in index.Rmd allows you to render the docx with a table of contents:\noutput:\n    bookdown::word_document2:\n      toc: true\nYou can also incorporate a template docx if you have headers and logos you want to use. To incorporate a template, make sure you add the reference_docx argument:\noutput:\n    bookdown::word_document2:\n      reference_docx: &lt;path/to/template&gt;.docx\n      toc: true\nLearn more about templates here."
  },
  {
    "objectID": "next_steps.html",
    "href": "next_steps.html",
    "title": "Next Steps",
    "section": "",
    "text": "Now that you’ve setup a shell for your OTTR repository, there are some next steps that you need to take, and some steps that we highly recommend. Additionally, there are further customizations you may want to consider.\n\nNecessary Next StepsHighly Recommended Next StepsAdditional Customizations to Consider\n\n\nTab Content … Visit here to learn more\n\n\nTab Content … Visit here to learn more\n\n\nTab Content … Visit here to learn more"
  },
  {
    "objectID": "customize-style.html",
    "href": "customize-style.html",
    "title": "Customizing Style",
    "section": "",
    "text": "The title is specified on the index.Rmd page in the yml header. Modify the yaml header to change the title for your course.\n---\ntitle: \"Title of Course\"\n---\nNote that if one of the chapter Rmd files has a title in the yml that comes first alphabetically, it will be shown as the title of the course. Hence avoid having yml header titles for the chapter files."
  },
  {
    "objectID": "customize-style.html#customizing-the-style",
    "href": "customize-style.html#customizing-the-style",
    "title": "Customizing Style",
    "section": "Customizing the Style",
    "text": "Customizing the Style\nThere are styles/brandings that are available in our library of style sets. However, there are also instructions to customize your own course style following these instructions in the next section.\n\nUsing a style set\nBy default this course template will use the JHU Data Science Lab style. However, you can switch this to another style set by moving some files. Take a look at the style-sets for the other styles available.\nFor example, if you are creating an ITCR course, you will need the files in style-sets/itcr or if you are making a DataTrail course, the files in style-sets/data-trail. For these instructions,let’s refer to data-trail or itcr as the &lt;set-name&gt;.\n\nOn a new branch, copy the style-sets/&lt;set-name&gt;/index.Rmd and style-sets/&lt;set-name&gt;/_output.yml to the top of the repository to overwrite the default index.Rmd and _output.yml.\nCopy over all the files in the style-sets/&lt;set-name&gt;/copy-to-assets to the assets folder in the top of the repository.\nCreate a pull request with these changes, and double check the rendered preview to make sure that the style is what you are looking for.\n\nRead here for more about how to customize your _output.yml file – which is ultimately a part of how bookdown works."
  },
  {
    "objectID": "customize-style.html#creating-your-own-style",
    "href": "customize-style.html#creating-your-own-style",
    "title": "Customizing Style",
    "section": "Creating your own style",
    "text": "Creating your own style\nHere are the instructions to change the aesthetic aspects about your course if you wish to create a new style for your course.\n\nChanging the favicon\nFavicons are small icons that appear on your browser tab. To change the favicon, first take the image you would like to use to this website to convert it into a favicon. Then save this file in the assets/ directory. On the index.Rmd file, make sure that the correct favicon is referenced to in the yaml header, so that the correct favicon will be used.\nHere you can see that by default the Data Science Lab (dasl) favicon will be used.\n---\ntitle: \"Course Name \"\ndate: \"`r format(Sys.time(), '%B, %Y')`\"\nsite: bookdown::bookdown_site\ndocumentclass: book\nbibliography: [book.bib, packages.bib]\nbiblio-style: apalike\nlink-citations: yes\ndescription: \"Description about Course/Book.\"\nfavicon: assets/dasl_favicon.ico\n---\nIf you are making an ITN course, then the favicon is already set up n the index-itcr.Rmd file. Just delete the existing index.Rmd file and rename the index-itcr.Rmd file to be index.Rmd. This is already part of the set up instructions.\n\n\nAdding logos\nLogos for the table of contents are added with the _output.yml file. This adds an image above the table of contents when the content is rendered with bookdown.\nIf you are creating a general DaSL course: - Please replace the URL in the line 13 of code for the _output.yml file with the URL for the GitHub repo for your course. This will allow people to more easily find how out how you created your course. Otherwise, they will be directed to this template.\nIf you are creating a DaSL course for a project other than ITN:\n\nDelete the _output.yml file and rename the _output-itcr.yml to be _output.yml.\nPlease modify the lines that link to the http://jhudatascience.org/ with your own website and logo if you are not part of the jhuDaSL .\nPlease replace the URL in the line 13 of code with the URL for the GitHub repo for your course. This will allow people to more easily find how out how you created your course. Otherwise, they will be directed to this template.\nIf you wish to create a different color scheme, the font colors can also be modified along with other aspects in the assets/style.css file. Take a look at the assets/style_ITN.css file to see what was changed for that color scheme from the assets/style.css file.\nYou can replace the logo with the appropriate project logo by replacing https://www.itcrtraining.org/ with the project website link and \"https://raw.githubusercontent.com/ottrproject/OTTR_Template/main/resources/images/logo.png\" for the project logo image link in line 11."
  },
  {
    "objectID": "customize-style.html#adding-sections-that-arent-numbered",
    "href": "customize-style.html#adding-sections-that-arent-numbered",
    "title": "Customizing Style",
    "section": "Adding sections that aren’t numbered",
    "text": "Adding sections that aren’t numbered\nYou may notice that currently the References page and about pages are not numbered like the other chapters. If you want additional sections like this add an Rmd file and type the name of the page after a single hashtag # followed by this: {-}. This will exclude this page from being numbered.\nThus as example the reference page looks like this:\n# References {-}"
  },
  {
    "objectID": "customize-style.html#changing-course-text-colors",
    "href": "customize-style.html#changing-course-text-colors",
    "title": "Customizing Style",
    "section": "Changing course text colors",
    "text": "Changing course text colors\nTo modify the colors used for the text, take a look at the assets/style.css code.\nIf you would like to change the current dark blue color to be a different color, search and replace for #012d72. You can find hex color codes at this website to use as a replacement.\nIf you would like to change the current light blue color to be a different color, do the same but search for #68ace5."
  },
  {
    "objectID": "customize-style.html#modifying-the-image-at-the-top-of-the-course",
    "href": "customize-style.html#modifying-the-image-at-the-top-of-the-course",
    "title": "Customizing Style",
    "section": "Modifying the image at the top of the course",
    "text": "Modifying the image at the top of the course\nIf you would like to change the image at the top of the Bookdown version of the course, you need to do the following steps: * Add a new image file to the assets directory * Modify the assets/big-image.html file on line 11. Change out src = \"assets/dasl_thin_main_image.png\" so that dasl_thin_main_image.png is replaced with the name of your image file."
  },
  {
    "objectID": "git_actions.html",
    "href": "git_actions.html",
    "title": "Git Actions",
    "section": "",
    "text": "We have set up several checks for website content edits.\nWhen you create a pull request, you will see something like this if everything is successful. You can click on the preview of website here link to see a preview. Please note that some features may not be possible to see in the preview. For example, icons may only show up as a box."
  },
  {
    "objectID": "git_actions.html#rendering-action",
    "href": "git_actions.html#rendering-action",
    "title": "Git Actions",
    "section": "Rendering Action",
    "text": "Rendering Action\nIf the rendering action fails, you will see something like this:\n\n\n\n\n\n\n\n\n\nIf you click on where it says Details on the far right, you will be taken to more information about what may have gone wrong.\n\n\n\n\n\n\n\n\n\nFor example, we can see that an R object was not found in one of the files. You could identify which file by scrolling up."
  },
  {
    "objectID": "git_actions.html#spelling-and-style-action",
    "href": "git_actions.html#spelling-and-style-action",
    "title": "Git Actions",
    "section": "Spelling and Style Action",
    "text": "Spelling and Style Action\nYou may find that you have spelling errors if you get the following message from your pull request (PR):\n\n\n\n\n\n\n\n\n\nIf this happens, click the Download the errors here. link. This will take you to a table with words that the check thought were misspelled, as well as what file they occurred in and the lines in that file.\nAdd words that are not actually misspelled to the dictionary.txt file located in the resources directory. It’s a good idea to try to keep this in alphabetical order.\nFor words that are indeed misspelled, fix the errors and push your changes to your pull request.\nYou should then see that your pull request has a different message that tells you that you have no spelling errors."
  },
  {
    "objectID": "git_actions.html#url-check",
    "href": "git_actions.html#url-check",
    "title": "Git Actions",
    "section": "URL Check",
    "text": "URL Check\nYou may find that you have broken URLs. If so, you will get this message when you create a Pull Request.\n\n\n\n\n\n\n\n\n\nYou can click on the Download the errors here link to see a document with a list of broken URLs and what files they are located in, like this:\n\n\n\n\n\n\n\n\n\nHere we can see that there are two URLs that are broken in the git_actions.Rmd file."
  },
  {
    "objectID": "git_actions.html#completing-a-pull-request",
    "href": "git_actions.html#completing-a-pull-request",
    "title": "Git Actions",
    "section": "Completing a Pull Request",
    "text": "Completing a Pull Request\nOnce all the Git Action checks pass, you can merge your pull request to your main branch for your website.\n\n\n\n\n\n\n\n\n\nIf you are only working on this yourself without others to review your pull request, you can click the Merge without waiting for requirements to be met box, so that you can click the Merge pull request button."
  },
  {
    "objectID": "faqs.html",
    "href": "faqs.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "This guide will describe the most common OTTR errors and pitfalls and how to address them. When you open a pull request, you should see a report like this:\n\nWhen you see an ❌ , click on the Details button to see the error message. We’ll discuss the most common error messages here.\n\n\n\nError example:\nError in png::readPNG(path, native = TRUE, info = TRUE) :\n  file is not in PNG format\nCalls: local ... lapply -&gt; FUN -&gt; raster_dpi_width -&gt; attr -&gt; &lt;Anonymous&gt;\nExecution halted\nError in Rscript_render(f, render_args, render_meta, add1, add2) :\n  Failed to compile &lt;file_name&gt;.Rmd\nCalls: local ... &lt;Anonymous&gt; -&gt; render_new_session -&gt; Rscript_render\nExecution halted\nError: bookdown::render_book() failed to render the output format 'bookdown::gitbook'.\nExecution halted\nWhat does this mean?:\nYour Google Slides presentation you have tried to retrieve a slide from with ottrpal::include_slide() is not public. Your Google Slide document must be set to Anyone with a link. See this article for more details. The renders will fail if this is not set! See the setting up images and graphics section for more details.\n\n\n\n\nUnderneath a section that says something like: **Check spelling/url/quiz errors - fail if too many of them** you may see something like:\nRun exit 1\n  exit 1\n  shell: sh -e {0}\nError: Process completed with exit code 1.\nThis is failing on purpose – it means that checker has found errors. Return to your pull request page and look for a comment that says something like:\n⚠️ There are &lt;spelling/quiz/url&gt; errors that need to be addressed. Read this guide for more info.\nDownload the errors here.\nComment updated at &lt;some_date&gt; with changes from &lt;commit&gt;\nClick on the Download the errors here to see the list of errors and which files they were found in. For help in addressing these errors, click on the Read this guide for more info button.\n\n\n\n\nError example:\nCONFLICT (modify/delete): &lt;file_name&gt; deleted in &lt;branch_name&gt; and modified in HEAD. Version HEAD of &lt;file_name&gt; left in tree.\nThis will often happen when render-preview’s git handling doesn’t know which changes you are looking to preview. The easiest way to fix this problem is to create a separate pull request that completely deletes the files lists. To do this, follow these steps:\n\nTake note of your pull request’s number. Go to the pull request page and see what #number is posted there.\nOn your GitHub repository, go to Code and click on Branches.\nYour pull request’s preview is made on a branch named preview-&lt;number of your pull request&gt;. Find this branch and click the trash can icon. This will delete the preview branch and hopefully get rid of this error. Read this for more info on how to delete a branch.\nRe-trigger your GitHub actions run and it should pass.\n\n\n\n\n\nIf you see an error like this:\nRun Rscript -e \"bookdown::render_book('index.Rmd', output_format = 'all')\"\nError in yaml::yaml.load(..., eval.expr = TRUE) :\n  Parser error: while parsing a flow sequence at line 4, column 12 did not find expected ',' or ']' at line 11, column 13\nCalls: &lt;Anonymous&gt; ... &lt;Anonymous&gt; -&gt; resolve -&gt; &lt;Anonymous&gt; -&gt; yaml_load -&gt; &lt;Anonymous&gt;\nExecution halted\nError: Process completed with exit code 1.\nIt means that the formatting in your _bookdown.yml is off. If you forget a comma, or quote, or a ] this message will appear in the github actions preview run.\nTake a careful look at the _bookdown.yml. Keep in mind that _bookdown.yml rmd_files spec should look like this (indents, quotes, and commas included in this pattern):\nrmd_files: [\"index.Rmd\",\n            \"01-intro.Rmd\",\n            \"02-chapter_of_course.Rmd\",\n            \"new_file.Rmd\",\n            \"About.Rmd\",\n            \"References.Rmd\"]\nCommit the changes to your _bookdown.yml and see if the preview GitHub action runs appropriately.\n\n\n\nIf you get a 404 error after clicking the link while attempting to download the .docx file from the GitHub Action rendered previews, then add the following code to the end of the _output.yml file:\nbookdown::word_document2:\n  toc: true\nCommit the changes to your _output.yml and see if the preview GitHub action runs appropriately.\n\n\n\nIf you observe an error like this:\nError in if (title == x2) return(head) : the condition has length &gt; 1\nCalls: &lt;Anonymous&gt; ... split_chapters -&gt; build -&gt; sub -&gt; is.factor -&gt; prepend_chapter_title\nExecution halted\nError: Process completed with exit code 1.\nThen look at the GA_Script.Rhtml file and remove the following html frontmatter if it’s present:\n(at the beginning of the file)\n  &lt;html&gt;\n\n  &lt;head&gt;\n  &lt;title&gt;Title&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n(at the end of the file)\n  &lt;/body&gt;\n  &lt;/html&gt;"
  },
  {
    "objectID": "faqs.html#most-common-errors",
    "href": "faqs.html#most-common-errors",
    "title": "Troubleshooting",
    "section": "",
    "text": "This guide will describe the most common OTTR errors and pitfalls and how to address them. When you open a pull request, you should see a report like this:\n\nWhen you see an ❌ , click on the Details button to see the error message. We’ll discuss the most common error messages here.\n\n\n\nError example:\nError in png::readPNG(path, native = TRUE, info = TRUE) :\n  file is not in PNG format\nCalls: local ... lapply -&gt; FUN -&gt; raster_dpi_width -&gt; attr -&gt; &lt;Anonymous&gt;\nExecution halted\nError in Rscript_render(f, render_args, render_meta, add1, add2) :\n  Failed to compile &lt;file_name&gt;.Rmd\nCalls: local ... &lt;Anonymous&gt; -&gt; render_new_session -&gt; Rscript_render\nExecution halted\nError: bookdown::render_book() failed to render the output format 'bookdown::gitbook'.\nExecution halted\nWhat does this mean?:\nYour Google Slides presentation you have tried to retrieve a slide from with ottrpal::include_slide() is not public. Your Google Slide document must be set to Anyone with a link. See this article for more details. The renders will fail if this is not set! See the setting up images and graphics section for more details.\n\n\n\n\nUnderneath a section that says something like: **Check spelling/url/quiz errors - fail if too many of them** you may see something like:\nRun exit 1\n  exit 1\n  shell: sh -e {0}\nError: Process completed with exit code 1.\nThis is failing on purpose – it means that checker has found errors. Return to your pull request page and look for a comment that says something like:\n⚠️ There are &lt;spelling/quiz/url&gt; errors that need to be addressed. Read this guide for more info.\nDownload the errors here.\nComment updated at &lt;some_date&gt; with changes from &lt;commit&gt;\nClick on the Download the errors here to see the list of errors and which files they were found in. For help in addressing these errors, click on the Read this guide for more info button.\n\n\n\n\nError example:\nCONFLICT (modify/delete): &lt;file_name&gt; deleted in &lt;branch_name&gt; and modified in HEAD. Version HEAD of &lt;file_name&gt; left in tree.\nThis will often happen when render-preview’s git handling doesn’t know which changes you are looking to preview. The easiest way to fix this problem is to create a separate pull request that completely deletes the files lists. To do this, follow these steps:\n\nTake note of your pull request’s number. Go to the pull request page and see what #number is posted there.\nOn your GitHub repository, go to Code and click on Branches.\nYour pull request’s preview is made on a branch named preview-&lt;number of your pull request&gt;. Find this branch and click the trash can icon. This will delete the preview branch and hopefully get rid of this error. Read this for more info on how to delete a branch.\nRe-trigger your GitHub actions run and it should pass.\n\n\n\n\n\nIf you see an error like this:\nRun Rscript -e \"bookdown::render_book('index.Rmd', output_format = 'all')\"\nError in yaml::yaml.load(..., eval.expr = TRUE) :\n  Parser error: while parsing a flow sequence at line 4, column 12 did not find expected ',' or ']' at line 11, column 13\nCalls: &lt;Anonymous&gt; ... &lt;Anonymous&gt; -&gt; resolve -&gt; &lt;Anonymous&gt; -&gt; yaml_load -&gt; &lt;Anonymous&gt;\nExecution halted\nError: Process completed with exit code 1.\nIt means that the formatting in your _bookdown.yml is off. If you forget a comma, or quote, or a ] this message will appear in the github actions preview run.\nTake a careful look at the _bookdown.yml. Keep in mind that _bookdown.yml rmd_files spec should look like this (indents, quotes, and commas included in this pattern):\nrmd_files: [\"index.Rmd\",\n            \"01-intro.Rmd\",\n            \"02-chapter_of_course.Rmd\",\n            \"new_file.Rmd\",\n            \"About.Rmd\",\n            \"References.Rmd\"]\nCommit the changes to your _bookdown.yml and see if the preview GitHub action runs appropriately.\n\n\n\nIf you get a 404 error after clicking the link while attempting to download the .docx file from the GitHub Action rendered previews, then add the following code to the end of the _output.yml file:\nbookdown::word_document2:\n  toc: true\nCommit the changes to your _output.yml and see if the preview GitHub action runs appropriately.\n\n\n\nIf you observe an error like this:\nError in if (title == x2) return(head) : the condition has length &gt; 1\nCalls: &lt;Anonymous&gt; ... split_chapters -&gt; build -&gt; sub -&gt; is.factor -&gt; prepend_chapter_title\nExecution halted\nError: Process completed with exit code 1.\nThen look at the GA_Script.Rhtml file and remove the following html frontmatter if it’s present:\n(at the beginning of the file)\n  &lt;html&gt;\n\n  &lt;head&gt;\n  &lt;title&gt;Title&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n(at the end of the file)\n  &lt;/body&gt;\n  &lt;/html&gt;"
  },
  {
    "objectID": "faqs.html#content-not-rendering",
    "href": "faqs.html#content-not-rendering",
    "title": "Troubleshooting",
    "section": "Content not rendering",
    "text": "Content not rendering\nCheck that the config file is up-to-date. It should look like this: https://github.com/ottrproject/OTTR_Template/blob/main/config_automation.yml. (be careful to keep your selections for the configuration you would like)."
  },
  {
    "objectID": "faqs.html#contact-info",
    "href": "faqs.html#contact-info",
    "title": "Troubleshooting",
    "section": "Contact Info",
    "text": "Contact Info\nIf you have a question that’s not addressed by this website or just wanna chat with us about something else, please email us at itcrtrainingnetwork@gmail.com OR you can leave a GitHub issue here and assign or “at” a team member in the description/a comment (@carriewright11, @kweav, or @avahoffman).\nWe greatly appreciate any feedback! We are always looking for ways to improve OTTR so more open source courses can be made!"
  },
  {
    "objectID": "ottr-fy.html",
    "href": "ottr-fy.html",
    "title": "OTTR-fy an existing repository",
    "section": "",
    "text": "WARNING This is in the very early stages of testing. You may feel free to try it, but file an issue with OTTR right away if it does not appear to be working as intended (or if you have other suggestions).\nIn some cases, if you have R Markdown files, Markdown files, or even better, Bookdown set of files in an existing repository that you would like to OTTR-fy you can do that following these steps. This method is a bit trickier and riskier than creating a repository from scratch and is still under some testing. So we recommend generally avoiding this strategy unless its unavoidable.\nThis set of steps also assumes you are more familiar with GitHub."
  },
  {
    "objectID": "ottr-fy.html#requirements-for-ottr-fying-a-repository",
    "href": "ottr-fy.html#requirements-for-ottr-fying-a-repository",
    "title": "OTTR-fy an existing repository",
    "section": "Requirements for OTTR-fying a repository:",
    "text": "Requirements for OTTR-fying a repository:\n\nNeed to have either Markdown or R Markdown documents in the top of your repository that you are seeking to publish.\nNeeds to be a public GitHub repository.\n\n\nStep 1: Add OTTR files to your current repository\nNavigate to the top of your repository and download this file.\nYou can do this by using wget, or by just using the link above and saving it as ottr-fy.R in the top of your repository.\nwget 'https://github.com/ottrproject/ottrpal/blob/main/R/ottrfy.R'\nYou’ve downloaded a script that will download the necessary files to run OTTR in your repository. Take a look at the filenames of what will be downloaded to make sure that you won’t accidentally overwrite any of your repository’s existing files.\n\n\nOTTR-fying files:\n\nFiles you won’t need to edit\n\n.github/workflows/pull_request.yml\n.github/workflows/render-all.yml\n.github/workflows/delete-preview.yml\n.github/workflows/docker-build.yml\n\n\n\nFiles you’ll need to edit to customize\n* These files also will not be downloaded if you already have set up your repository as a bookdown website and specify this in the upcoming command.\n\n_bookdown.yml or _site.yml for a website/course respectively\n_output.yml\nbook.bib\nassets/big-image.html\nassets/footer.html\n\n\n\nFile you will likely want to edit but don’t have to\n\nconfig_automation.yml\nassets/style.css\n\nRun this this script from your command line if your repository is not already a bookdown website.\nRscript ottr-fy.R\nIf your repository is already configured as a bookdown website, then run this command (aka use the --bookdown flag):\nRscript ottr-fy.R --bookdown\nNote if your GitHub repository is not configured, this script will not work.\nThis script will automatically:\n\nOpen a new branch called robot/ottrfy.\nAdd the OTTR files listed above.\nAdd, commit, and push this branch to an origin\n\nAfter that, you should go to your repository and open up a pull request. The OTTR automation checks should happen on this pull request automatically. Render preview check will almost certainly fail until you complete the next step.\nIf they do not automatically start running, you may also want to check in your Settings &gt; Actions that Allow all actions and reusable workflows is chosen.\nCheck your files on this pull request your files and that nothing horrible has happened to your original files (like being overwritten or deleted).\n\n\n\n2. Add your Rmd or md files to the _bookdown.yml or _site.yml file\nYou will almost certainly find that the Render preview check will fail (and possibly the spelling and URL checks).\nOne reason that this will fail is that you will need to edit _bookdown.yml _site.yml to list your Rmds (or mds) in the order they should appear in the course. (See this section for more information about these checks and what they are)\nMake sure to commit this to your branch. * Note! Don’t merge this pull request before you finish adding a few settings as described in this next step.\n\n\n3. Set up your repository with the proper settings\nFrom here, you can follow the rest of the steps described in the Getting Started section."
  }
]